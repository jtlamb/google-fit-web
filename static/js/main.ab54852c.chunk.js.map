{"version":3,"sources":["imgs/GoogleFit_Logo_Vertical.png","components/LandingPage.jsx","util/HomeGraphs.jsx","util/Conversions.jsx","components/Home.jsx","components/Profile.jsx","components/Journal.jsx","components/About.jsx","util/UserProfile.jsx","components/SignInOut.jsx","imgs/GoogleFit_Logo_Horizontal.png","components/SideNav.jsx","components/App.jsx","reportWebVitals.js","index.tsx"],"names":["LandingPage","className","src","Logo","alt","renderBarGraph","props","width","height","chartType","loader","data","label","date","options","chart","title","subtitle","renderPieChart","actual","goal","color","Math","max","pieHole","legend","pieSliceText","slices","mToFt","m","ft","inches","trunc","round","mToMi","getMonth","Home","useState","selected","setSelected","key","setKey","loaded","setLoaded","handleClick","i","requestURL","d","Date","setHours","day","week","heartPoints","setHeartPoints","hpBody","getTime","useEffect","fetch","method","headers","user","accessToken","body","JSON","stringify","then","res","json","response","temp","bucket","forEach","x","parseInt","startTimeMillis","dataset","point","length","obj","value","fpVal","toDateString","push","catch","error","console","log","steps","setSteps","stepsBody","intVal","dist","setDist","distBody","moveMins","setMoveMins","mmBody","cals","setCals","calsBody","handlePagination","fname","class","role","onClick","map","stepsData","hpData","distData","mmData","calsData","dates","tempDate","getDate","renderStepsGraph","renderDistanceGraph","renderMoveMinsGraph","renderHeartPointsGraph","renderCaloriesGraph","bottomGraphs","Profile","bDate","setBDate","gender","setGender","weight","setWeight","setHeight","peopleRequestUrl","URL","protocol","hostname","pathname","searchParams","append","kg","birthdays","month","year","genders","formattedValue","weightBody","heightBody","authenticated","pfPic","lname","scope","Journal","e","hour","dateEnd","setDateEnd","selectedDate","setSelectedDate","isDstObserved","today","getTimezoneOffset","jan","jul","stdTimezoneOffset","handleNav","val","handleSelectedDate","heartPointsLog","setHeartPointsLog","logSteps","setLogSteps","distLog","setDistLog","calsLog","setCalsLog","moveMinsLog","setMoveMinsLog","hpLogBody","hplist","stepsLogBody","steplist","toFixed","time","hp","step","mm","rows","setRows","row","entry","toLocaleTimeString","dateStart","getFullYear","getMonthTitle","renderDays","About","href","target","blankUser","name","email","CLIENT_ID","keys","web","client_id","SignInOut","isLoggedIn","setIsLoggedIn","setUser","useContext","userContext","clientId","buttonText","onLogoutSuccess","onFailure","alert","onSuccess","getBasicProfile","getName","getGivenName","getFamilyName","getImageUrl","slice","lastIndexOf","getEmail","getGrantedScopes","cookiePolicy","responseType","SideNav","to","FitLogo","aria-hidden","createContext","App","basename","Provider","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab54852c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/GoogleFit_Logo_Vertical.0368927f.png\";","/* Packages */\r\nimport React from 'react';\r\n/* Utils */\r\nimport Logo from '../imgs/GoogleFit_Logo_Vertical.png';\r\n/* Styles */\r\nimport '../styles/LandingPage.scss';\r\n\r\nexport default function LandingPage() {\r\n\r\n    return (\r\n        <div className=\"landing\">\r\n            <div className=\"header-landing\">\r\n                <img src={Logo} alt=\"Google Fit Logo\" className=\"header-image-landing\"/>\r\n            </div>\r\n            <div className=\"content-landing\">\r\n                <span className=\"content-text-landing\">Login to view your Google Fit data or select About to learn more about this site.</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","/* Packages */\nimport React from 'react';\nimport { Chart } from \"react-google-charts\";\n\nconst graphWidth = '40em';\nconst graphHeight = '25em';\n\nexport const renderBarGraph = (props) => {\n\n    return (\n        <Chart\n            width={graphWidth}\n            height={graphHeight}\n            chartType=\"Bar\"\n            loader={<div>Loading Chart</div>}\n            data={[\n                ['Date', props.label],\n                [props.date[0], props.data[0]],\n                [props.date[1], props.data[1]],\n                [props.date[2], props.data[2]],\n                [props.date[3], props.data[3]],\n                [props.date[4], props.data[4]],\n                [props.date[5], props.data[5]],\n                [props.date[6], props.data[6]],\n            ]}\n            options={{\n                // Material design options\n                chart: {\n                title: props.title,\n                subtitle: props.subtitle,\n                },\n            }}\n        />\n    )\n}\n\n\nconst pieWidth = '13em';\nconst pieHeight = '13em';\n\nexport const renderPieChart = (actual, goal, color, title) => {\n    return (\n        <div className=\"pie\">\n            <Chart\n                width={pieWidth}\n                height={pieHeight}\n                chartType=\"PieChart\"\n                loader={<span className=\"material-icons loading-icon\">loop</span>}\n                data={[\n                    ['Move Minutes', 'Amount'],\n                    ['Actual', actual],\n                    ['Away from Goal', Math.max(0, goal - actual)],\n                ]}\n                options={{\n                    pieHole: 0.75,\n                    legend: 'none',\n                    pieSliceText: 'none',\n                    slices: [\n                        {\n                        color: color\n                        },\n                        {\n                        color: \"#d3d3d3\"\n                        }\n                    ],\n                }}\n            />\n            {title}   \n        </div>\n    )\n}","/**\n * @param kg kilograms\n * @returns conversion from kg to lbs\n */\nexport function kToLbs(kg) {\n    return kg * 2.20462;\n}\n\n/**\n * @param m meters\n * @returns conversion from meters to feet\n */\nexport function mToFt(m) {\n    let ft = m * 3.28084;\n    let inches = (ft % Math.trunc(ft)) * 12;\n    ft = Math.trunc(ft);\n    inches = Math.round(inches);\n    return {\n        ft,\n        inches\n    }\n}\n/**\n * @param m meters \n * @returns conversion from meters to miles\n */\nexport function mToMi(m) {\n    return m*0.000621371192;\n}\n\n/**\n * @param m number of month \n * @returns string representation of the month\n */\nexport function getMonth(m) {\n    switch(m) {\n        case 1: return \"January\";\n        case 2: return \"February\";\n        case 3: return \"March\";\n        case 4: return \"April\";\n        case 5: return \"May\";\n        case 6: return \"June\";\n        case 7: return \"July\";\n        case 8: return \"August\";\n        case 9: return \"September\";\n        case 10: return \"October\";\n        case 11: return \"November\";\n        case 12: return \"December\";\n        default: return \"Invalid Month\"\n    }\n}\n\n/**\n * not implemented as of the completion of this project because we were not able to obtain activity data recorded by the Google Fit mobile app\n * @param a int or string value of activity\n * @returns (key, value) pair representation of activity type as defined in the google api (https://developers.google.com/fit/rest/v1/reference/activity-types)\n */\nexport function getActivityType(a) {\n    switch(a) {\n\n    }\n}\n","/* Packages */\r\nimport React, { useState, useEffect } from 'react';\r\n/* Util */\r\nimport {renderPieChart, renderBarGraph } from '../util/HomeGraphs';\r\nimport { mToMi } from '../util/Conversions';\r\n/* Styles */\r\nimport '../styles/Home.scss'\r\n\r\nexport default function Home(props) {\r\n    // selected will track the current index of the selected item\r\n    const [ selected, setSelected ] = useState(0);\r\n    const [ key, setKey ] = useState(0);\r\n    const [ loaded, setLoaded ] = useState(false)\r\n\r\n    const handleClick = (i) => {\r\n        setSelected(i);\r\n    }\r\n\r\n    const requestURL = `https://www.googleapis.com/fitness/v1/users/me/dataset:aggregate`;\r\n    let d = new Date();\r\n    d.setHours(0,0,0,0);\r\n    const day = 86400000;\r\n    const week = 7*day;\r\n    \r\n\r\n    // ------------HEART POINTS API CALL------------\r\n    const [ heartPoints, setHeartPoints ] = useState([{actual: 0, goal: 0, color: '', date: ''}]);\r\n\r\n    const hpBody = {\r\n        \"aggregateBy\": [{\r\n            \"dataTypeName\": \"com.google.heart_minutes\",\r\n        }],\r\n        \"startTimeMillis\": d.getTime() - week + day,\r\n        \"endTimeMillis\": d.getTime() + day,\r\n        \"bucketByTime\": {\r\n            \"durationMillis\": day,\r\n            \"period\": {\r\n                \"type\": \"day\",\r\n                \"value\": 1,\r\n                \"timeZoneId\": \"America/New_York\"\r\n            }\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(hpBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            let temp = [];\r\n            response.bucket.forEach(x => {\r\n                let date = new Date(parseInt(x.startTimeMillis));\r\n                if (x.dataset[0].point.length !== 0) {\r\n                    let obj = {\r\n                        actual: x.dataset[0].point[0].value[0].fpVal, \r\n                        goal: 36, \r\n                        color: '#06bf9a', \r\n                        date: date.toDateString()\r\n                    }\r\n                    temp.push(obj);\r\n                } else {\r\n                    let obj = {\r\n                        actual: 0, \r\n                        goal: 36, \r\n                        color: '#06bf9a', \r\n                        date: date.toDateString()\r\n                    }\r\n                    temp.push(obj);\r\n                }\r\n            });\r\n            setHeartPoints(temp);\r\n        })\r\n        .catch(error => console.log(error));\r\n\r\n        \r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // ------------STEPS API CALL------------\r\n    const [ steps, setSteps ] = useState([{actual: 0, goal: 0, color: '', date: ''}]);\r\n\r\n    const stepsBody = {\r\n        \"aggregateBy\": [{\r\n            \"dataTypeName\": \"com.google.step_count.delta\",\r\n            \"dataSourceId\": \"derived:com.google.step_count.delta:com.google.android.gms:estimated_steps\"\r\n        }],\r\n        \"startTimeMillis\": d.getTime() - week + day,\r\n        \"endTimeMillis\": d.getTime() + day,\r\n        \"bucketByTime\": {\r\n            \"durationMillis\": day,\r\n            \"period\": {\r\n                \"type\": \"day\",\r\n                \"value\": 1,\r\n                \"timeZoneId\": \"America/New_York\"\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(stepsBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            let temp = [];\r\n            response.bucket.forEach(x => {\r\n                let date = new Date(parseInt(x.startTimeMillis));\r\n                if (x.dataset[0].point.length !== 0) {\r\n                    let obj = {\r\n                        actual: x.dataset[0].point[0].value[0].intVal, \r\n                        goal: 15000, \r\n                        color: '#4285F4', \r\n                        date: date.toDateString()\r\n                    }\r\n                    temp.push(obj);\r\n                } else {\r\n                    let obj = {\r\n                        actual: 0, \r\n                        goal: 15000, \r\n                        color: '#4285F4', \r\n                        date: date.toDateString()\r\n                    }\r\n                    temp.push(obj);\r\n                }\r\n            });\r\n            setSteps(temp);\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // ------------DIST API CALL------------\r\n    const [ dist, setDist ] = useState([{actual: 0, goal: 0, color: '', date: ''}]);\r\n\r\n    const distBody = {\r\n        \"aggregateBy\": [{\r\n            \"dataTypeName\": \"com.google.distance.delta\",\r\n        }],\r\n        \"startTimeMillis\": d.getTime() - week + day,\r\n        \"endTimeMillis\": d.getTime() + day,\r\n        \"bucketByTime\": {\r\n            \"durationMillis\": day,\r\n            \"period\": {\r\n                \"type\": \"day\",\r\n                \"value\": 1,\r\n                \"timeZoneId\": \"America/New_York\"\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(distBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            let temp = [];\r\n            response.bucket.forEach(x => {\r\n                let date = new Date(parseInt(x.startTimeMillis));\r\n                if (x.dataset[0].point.length !== 0) {\r\n                    let obj = {\r\n                        actual: mToMi(x.dataset[0].point[0].value[0].fpVal), \r\n                        goal: 15000, \r\n                        color: '#4285F4', \r\n                        date: date.toDateString()\r\n                    }\r\n                    temp.push(obj);\r\n                } else {\r\n                    let obj = {\r\n                        actual: 0, \r\n                        goal: 15000, \r\n                        color: '#4285F4', \r\n                        date: date.toDateString()\r\n                    }\r\n                    temp.push(obj);\r\n                }\r\n            });\r\n            setDist(temp);\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // ------------MOVE MINS API CALL------------\r\n    const [ moveMins, setMoveMins ] = useState([{actual: 0, goal: 0, color: '', date: ''}]);\r\n\r\n    const mmBody = {\r\n        \"aggregateBy\": [{\r\n            \"dataTypeName\": \"com.google.active_minutes\",\r\n        }],\r\n        \"startTimeMillis\": d.getTime() - week + day,\r\n        \"endTimeMillis\": d.getTime() + day,\r\n        \"bucketByTime\": {\r\n            \"durationMillis\": day,\r\n            \"period\": {\r\n                \"type\": \"day\",\r\n                \"value\": 1,\r\n                \"timeZoneId\": \"America/New_York\"\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(mmBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            let temp = [];\r\n            response.bucket.forEach(x => {\r\n                let date = new Date(parseInt(x.startTimeMillis));\r\n                if (x.dataset[0].point.length !== 0) {\r\n                    let obj = {\r\n                        actual: x.dataset[0].point[0].value[0].intVal, \r\n                        goal: 15000, \r\n                        color: '#4285F4', \r\n                        date: date.toDateString()\r\n                    }\r\n                    temp.push(obj);\r\n                } else {\r\n                    let obj = {\r\n                        actual: 0, \r\n                        goal: 15000, \r\n                        color: '#4285F4', \r\n                        date: date.toDateString()\r\n                    }\r\n                    temp.push(obj);\r\n                }\r\n            });\r\n            setMoveMins(temp);\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // ------------CALS API CALL------------\r\n    const [ cals, setCals ] = useState([{actual: 0, goal: 0, color: '', date: ''}]);\r\n\r\n    const calsBody = {\r\n        \"aggregateBy\": [{\r\n            \"dataTypeName\": \"com.google.calories.expended\",\r\n        }],\r\n        \"startTimeMillis\": d.getTime() - week + day,\r\n        \"endTimeMillis\": d.getTime() + day,\r\n        \"bucketByTime\": {\r\n            \"durationMillis\": day,\r\n            \"period\": {\r\n                \"type\": \"day\",\r\n                \"value\": 1,\r\n                \"timeZoneId\": \"America/New_York\"\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(calsBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            let temp = [];\r\n            response.bucket.forEach(x => {\r\n                let date = new Date(parseInt(x.startTimeMillis));\r\n                if (x.dataset[0].point.length !== 0) {\r\n                    let obj = {\r\n                        actual: x.dataset[0].point[0].value[0].fpVal, \r\n                        goal: 15000, \r\n                        color: '#4285F4', \r\n                        date: date.toDateString()\r\n                    }\r\n                    temp.push(obj);\r\n                } else {\r\n                    let obj = {\r\n                        actual: 0, \r\n                        goal: 15000, \r\n                        color: '#4285F4', \r\n                        date: date.toDateString()\r\n                    }\r\n                    temp.push(obj);\r\n                }\r\n            });\r\n            setCals(temp);\r\n            setLoaded(true);\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // ------------BOTTOM GRAPHS------------\r\n    const handlePagination = (i) => {\r\n        if (i === 0) {\r\n            // going left\r\n            (key - 1 === -1) ? setKey(4) : setKey(key - 1);\r\n        } else {\r\n            // going right\r\n            (key + 1 === 5) ? setKey(0) : setKey(key + 1);\r\n        }\r\n    }\r\n\r\n    const bottomGraphs = (key) => {\r\n        let stepsData = [];\r\n        steps.map(x => stepsData.push(x.actual));\r\n        let hpData = [];\r\n        heartPoints.map(x => hpData.push(x.actual));\r\n        let distData = [];\r\n        dist.map(x => distData.push(x.actual));\r\n        let mmData = []\r\n        moveMins.map(x => mmData.push(x.actual));\r\n        let calsData = [];\r\n        cals.map(x => calsData.push(x.actual));\r\n        let dates = [];\r\n        for (let i = 1; i < 8; i++) {\r\n            let tempDate = new Date(d.getTime()-week+i*day);\r\n            dates.push(tempDate.getMonth()+1 + \"/\" + tempDate.getDate());\r\n        }\r\n        switch (key) {\r\n            case 0:\r\n                return (\r\n                    <>\r\n                    <span className='bottomGraph'>{renderStepsGraph(dates, stepsData)}</span>\r\n                    <span className='bottomGraph'>{renderDistanceGraph(dates, distData)}</span>\r\n                    </>\r\n                )\r\n            case 1:\r\n                return (\r\n                    <>\r\n                    <span className='bottomGraph'>{renderDistanceGraph(dates, distData)}</span>\r\n                    <span className='bottomGraph'>{renderMoveMinsGraph(dates, mmData)}</span>\r\n                    </>\r\n                )\r\n            case 2:\r\n                return (\r\n                    <>\r\n                    <span className='bottomGraph'>{renderMoveMinsGraph(dates, mmData)}</span>\r\n                    <span className='bottomGraph'>{renderHeartPointsGraph(dates, hpData)}</span>\r\n                    </>\r\n                )\r\n            case 3: \r\n                return (\r\n                    <>\r\n                    <span className='bottomGraph'>{renderHeartPointsGraph(dates, hpData)}</span>\r\n                    <span className='bottomGraph'>{renderCaloriesGraph(dates, calsData)}</span>\r\n                    </>\r\n                )\r\n            case 4: \r\n                return (\r\n                    <>\r\n                    <span className='bottomGraph'>{renderCaloriesGraph(dates, calsData)}</span>\r\n                    <span className='bottomGraph'>{renderStepsGraph(dates, stepsData)}</span>\r\n                    </>\r\n                )\r\n            default:\r\n            break;\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <div className=\"name\">\r\n                Welcome to Google Fit Web, {props.user.fname}!\r\n            </div>\r\n            <div >\r\n                {loaded ? \r\n                <>\r\n                    <div class=\"middleGraphs\">\r\n                    <div class=\"mdc-chip-set mdc-chip-set--choice\" role=\"grid\">\r\n                            <div class={selected === 0 ? \"mdc-chip chip-selected\" : \"mdc-chip\"} role=\"row\" onClick={() => handleClick(0)}>\r\n                                <span role=\"gridcell\">\r\n                                    <span role=\"button\" class=\"mdc-chip__primary-action\">\r\n                                        <span class=\"mdc-chip__text\">Heart Points</span>\r\n                                    </span>\r\n                                </span>\r\n                            </div>\r\n                            <div class={selected === 1 ? \"mdc-chip chip-selected\" : \"mdc-chip\"} role=\"row\" onClick={() => handleClick(1)}>\r\n                                <span role=\"gridcell\">\r\n                                    <span role=\"button\" class=\"mdc-chip__primary-action\">\r\n                                        <span class=\"mdc-chip__text\">Steps</span>\r\n                                    </span>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"dailyGoalsText\">Your Daily {selected === 0 ? \"Heart Points\" : \"Steps\"} Goals</span>\r\n                        <div className=\"weeklyGoalGraphs\">\r\n                            {selected === 0 ? heartPoints.map(x => renderPieChart(x.actual, x.goal, x.color, x.date)) : steps.map(x => renderPieChart(x.actual, x.goal, x.color, x.date))}\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div className='bottomGraphs'>\r\n                        <button class=\"mdc-icon-button material-icons\" onClick={() => handlePagination(0)}>keyboard_arrow_left</button>\r\n                        {bottomGraphs(key)}\r\n                        <button class=\"mdc-icon-button material-icons\" onClick={() => handlePagination(1)}>keyboard_arrow_right</button>\r\n                    </div>\r\n                </>\r\n                :\r\n                <div>\r\n                    <span className=\"loading\">Loading Fitness Data ...</span> \r\n                    <br/>\r\n                    <span class=\"material-icons md-spec\">cached</span>\r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst renderStepsGraph = (dates, data) => {\r\n    // get step info from API\r\n    const props = {\r\n        label: 'Steps',\r\n        title: 'Steps',\r\n        subtitle: 'Step data for the past week',\r\n        date: dates,\r\n        data: data\r\n    }\r\n    return renderBarGraph(props);\r\n}\r\n\r\nconst renderDistanceGraph = (dates, data) => {\r\n    // get distance info from API\r\n    const props = {\r\n        label: 'Distance (miles)',\r\n        title: 'Distance',\r\n        subtitle: 'Distance travelled over the past week',\r\n        date: dates,\r\n        data: data\r\n    }\r\n    return renderBarGraph(props);\r\n}\r\n\r\nconst renderMoveMinsGraph = (dates, data) => {\r\n    // get move mins info from API\r\n    const props = {\r\n        label: 'Move Mins',\r\n        title: 'Move Minutes',\r\n        subtitle: 'Move Minutes for the past week',\r\n        date: dates,\r\n        data: data\r\n    }\r\n    return renderBarGraph(props);\r\n}\r\n\r\nconst renderCaloriesGraph = (dates, data) => {\r\n    // get calories info from API\r\n    const props = {\r\n        label: 'Calories (kCal)',\r\n        title: 'Calories',\r\n        subtitle: 'Calories expended over the past week',\r\n        date: dates,\r\n        data: data\r\n    }\r\n    return renderBarGraph(props);\r\n}\r\n\r\nconst renderHeartPointsGraph = (dates, data) => {\r\n    // get calories info from API\r\n    const props = {\r\n        label: 'Heart Points',\r\n        title: 'Heart Points',\r\n        subtitle: 'Heart Points over the past week',\r\n        date: dates,\r\n        data: data\r\n    }\r\n    return renderBarGraph(props);\r\n}\r\n","/* Packages */\r\nimport React, { useEffect, useState } from 'react';\r\n/* Util */\r\nimport { getMonth, kToLbs, mToFt } from '../util/Conversions';\r\n/* Styles */\r\nimport '../styles/Profile.scss'\r\n\r\nexport default function Profile(props) {\r\n    const d = new Date();\r\n    const day = 86400000;\r\n\r\n    const [ loaded, setLoaded ] = useState(false);\r\n    const [ bDate, setBDate ] = useState('');\r\n    const [ gender, setGender ] = useState('');\r\n    const [ weight, setWeight ] = useState(-1);\r\n    const [ height, setHeight ] = useState(-1);\r\n\r\n    /* request urls */\r\n    const peopleRequestUrl = new URL('https://people.googleapis.com');\r\n    peopleRequestUrl.protocol = 'https';\r\n    peopleRequestUrl.hostname = 'people.googleapis.com';\r\n    peopleRequestUrl.pathname = '/v1/people/me';\r\n    peopleRequestUrl.searchParams.append('personFields', 'birthdays,genders,names');\r\n    peopleRequestUrl.searchParams.append('sources', 'READ_SOURCE_TYPE_PROFILE');\r\n    const requestURL = `https://www.googleapis.com/fitness/v1/users/me/dataset:aggregate`;\r\n\r\n    useEffect(() => {\r\n    // get name, birthday, gender\r\n        fetch(\r\n            peopleRequestUrl,\r\n            {\r\n                method: \"GET\",\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                }\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            setBDate(`${getMonth(response.birthdays[0].date.month)} ${response.birthdays[0].date.day}, ${response.birthdays[0].date.year}`);\r\n            setGender(`${response.genders[0].formattedValue}`);\r\n        })\r\n        .catch(error => console.log(error));\r\n\r\n    // get weight if recorded in the past 90 days\r\n        const weightBody = {\r\n            \"aggregateBy\": [{\r\n                \"dataTypeName\": \"com.google.weight\",\r\n                \"dataSourceId\": \"derived:com.google.weight:com.google.android.gms:merge_weight\"\r\n            }],\r\n            \"startTimeMillis\": d.getTime() - 90 * day,\r\n            \"endTimeMillis\": d.getTime(),\r\n            \"bucketByTime\": {\r\n                \"durationMillis\": day,\r\n                \"period\": {\r\n                    \"type\": \"day\",\r\n                    \"value\": 1,\r\n                    \"timeZoneId\": \"America/New_York\"\r\n                }\r\n            }\r\n        };\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(weightBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            response.bucket.forEach(x => {\r\n                if (x.dataset[0].point.length !== 0 && weight === -1) {\r\n                    setWeight(x.dataset[0].point[0].value[0].fpVal);\r\n                }\r\n            });\r\n        })\r\n        .catch(error => console.log(error));\r\n\r\n    // get height if recorded in the past 90 days\r\n        const heightBody = {\r\n            \"aggregateBy\": [{\r\n                \"dataTypeName\": \"com.google.height\",\r\n                \"dataSourceId\": \"derived:com.google.height:com.google.android.gms:merge_height\"\r\n            }],\r\n            \"startTimeMillis\": d.getTime() - 90 * day,\r\n            \"endTimeMillis\": d.getTime(),\r\n            \"bucketByTime\": {\r\n                \"durationMillis\": day,\r\n                \"period\": {\r\n                    \"type\": \"day\",\r\n                    \"value\": 1,\r\n                    \"timeZoneId\": \"America/New_York\"\r\n                }\r\n            }\r\n        };\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(heightBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            response.bucket.forEach(x => {\r\n                if (x.dataset[0].point.length !== 0 && height === -1) {\r\n                    setHeight(x.dataset[0].point[0].value[0].fpVal);\r\n                }\r\n            });\r\n\r\n        })\r\n        .catch(error => console.log(error));\r\n\r\n        setLoaded(true);\r\n\r\n    }, [props.user.authenticated])  // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <img src={props.user.pfPic} alt=\"Profile\" className=\"pfp\"/>\r\n            <span className=\"name\">{props.user.fname} {props.user.lname}</span>\r\n            <div class=\"mdc-data-table basic-info\">\r\n                <div class=\"mdc-data-table__table-container\">\r\n                    <table class=\"mdc-data-table__table\">\r\n                        <thead>\r\n                            <tr class=\"mdc-data-table__header-row\">\r\n                                <th class=\"mdc-data-table__header-cell\"><span className=\"tableTitle\">Basic Information</span></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody class=\"mdc-data-table__content\">\r\n                            <tr class=\"mdc-data-table__row\">\r\n                                <th class=\"mdc-data-table__cell\" scope=\"row\">Birthday</th>\r\n                                <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">{loaded ? bDate : '—'}</td>\r\n                            </tr>\r\n                            <tr class=\"mdc-data-table__row\">\r\n                                <th class=\"mdc-data-table__cell\" scope=\"row\">Gender</th>\r\n                                <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">{loaded ? gender : '—'}</td>\r\n                            </tr>\r\n                            <tr class=\"mdc-data-table__row\">\r\n                                <th class=\"mdc-data-table__cell\" scope=\"row\">Weight</th>\r\n                                <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">{weight === -1 ? '—' : Math.round(kToLbs(weight)) + ' lbs'}</td>\r\n                            </tr>\r\n                            <tr class=\"mdc-data-table__row\">\r\n                                <th class=\"mdc-data-table__cell\" scope=\"row\">Height</th>\r\n                                <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">{height === -1 ? '—' : `${mToFt(height).ft} ft ${mToFt(height).inches} in`}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div className=\"footnote\">\r\n                *Shows most recent height and weight data inputted within the last 90 days\r\n            </div>\r\n        </div>\r\n    );\r\n}","/* Packages */\r\nimport React, { useState, useEffect } from 'react';\r\n/* Util */\r\nimport {renderPieChart } from '../util/HomeGraphs';\r\nimport { mToMi, getMonth } from '../util/Conversions';\r\n/* Styles */\r\nimport '../styles/Journal.scss'\r\n\r\nexport default function Journal(props) {\r\n    // basic constants to use throughout the file\r\n    const requestURL = `https://www.googleapis.com/fitness/v1/users/me/dataset:aggregate`;\r\n    let d = new Date(), e = new Date(d);\r\n    d.setHours(0,0,0,0);\r\n    const hour = 3600000;\r\n    const day = 86400000;\r\n    const week = 7*day;\r\n\r\n    // determine whether or not the data is loaded yet\r\n    const [ loaded, setLoaded ] = useState(false);\r\n\r\n    // ------------NAVIGATION LOGIC------------\r\n    const [ dateEnd, setDateEnd ] = useState(new Date(d));\r\n    const [ selectedDate, setSelectedDate ] = useState(new Date(d));\r\n\r\n    // functions to handle daylight savings -- doesn't work perfectly for the log, but does handle the navigation correctly\r\n    const stdTimezoneOffset = () => {\r\n        var jan = new Date(0, 1)\r\n        var jul = new Date(6, 1)\r\n        return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset())\r\n    }\r\n    const isDstObserved = (today) => {\r\n        return today.getTimezoneOffset() < stdTimezoneOffset()\r\n    }\r\n\r\n    // render the days as buttons in the navigation bar\r\n    const renderDays = () => {\r\n        let dates = [];\r\n        for (let i = 14; i > 0; i--) {\r\n            const tempDate = new Date(dateEnd.getTime()-2*week+i*day);\r\n            if (!isDstObserved(tempDate) && isDstObserved(dateEnd)) {\r\n                dates.push(new Date(tempDate.getTime() + hour));\r\n            } else if (isDstObserved(tempDate) && !isDstObserved(dateEnd)) {\r\n                dates.push(new Date(tempDate.getTime() - hour));\r\n            } else {\r\n                dates.push(tempDate);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"days\">\r\n                {dates.map((x,i) => <div className=\"day\"><button class={x.getTime() === selectedDate.getTime() ? \"mdc-icon-button dateSelected\" : \"mdc-icon-button\"} onClick={() => handleSelectedDate(i)}>{x.getDate()}</button></div>)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // handle the arrows being selected in the navigation bar - shifts the dates by 2 weeks\r\n    const handleNav = (val) => {\r\n        const tempDate = new Date(dateEnd.getTime() + val * 2 * week);\r\n        if (tempDate.getTime() <= e.getTime()) {\r\n            if (!isDstObserved(tempDate) && isDstObserved(dateEnd)) {\r\n                setDateEnd(new Date(tempDate.getTime() + hour));\r\n            } else if (isDstObserved(tempDate) && !isDstObserved(dateEnd)) {\r\n                setDateEnd(new Date(tempDate.getTime() - hour));\r\n            } else {\r\n                setDateEnd(tempDate);\r\n            }\r\n        } else {\r\n            console.log(\"Stopped user from navigating to future dates.\");\r\n        }\r\n    }\r\n\r\n    // handle a date being selected in the navigation bar\r\n    const handleSelectedDate = (i) => {\r\n        setLoaded(false);\r\n        const tempDate = new Date(dateEnd.getTime() - i*day);\r\n        if (!isDstObserved(tempDate) && isDstObserved(dateEnd)) {\r\n            setSelectedDate(new Date(tempDate.getTime() + hour));\r\n        } else if (isDstObserved(tempDate) && !isDstObserved(dateEnd)) {\r\n            setSelectedDate(new Date(tempDate.getTime() - hour));\r\n        } else {\r\n            setSelectedDate(tempDate);\r\n        }\r\n    }\r\n\r\n    // month/year displayed above navigation\r\n    const getMonthTitle = () => {\r\n        const dateStart = new Date(dateEnd.getTime() - 2 * week + day);\r\n        if (dateEnd.getFullYear() !== dateStart.getFullYear()) {\r\n            return `${getMonth(dateStart.getMonth()+1)} ${dateStart.getFullYear()} — ${getMonth(dateEnd.getMonth()+1)} ${dateEnd.getFullYear()}`;\r\n        }\r\n        if (dateEnd.getMonth() !== dateStart.getMonth()) {\r\n            return `${getMonth(dateStart.getMonth()+1)} — ${getMonth(dateEnd.getMonth()+1)} ${dateEnd.getFullYear()}`;\r\n        }\r\n        return `${getMonth(dateEnd.getMonth()+1)} ${dateEnd.getFullYear()}`;\r\n    }\r\n\r\n    // ------------API CALLS------------\r\n    const [ heartPoints, setHeartPoints ] = useState({actual: 0, goal: 0, color: '', title: ''});\r\n    const [ heartPointsLog, setHeartPointsLog ] = useState([0]);\r\n    const [ steps, setSteps ] = useState({actual: 0, goal: 0, color: '', title: ''});\r\n    const [ logSteps, setLogSteps ] = useState([0]);\r\n    const [ distLog, setDistLog ] = useState([0]);\r\n    const [ calsLog, setCalsLog ] = useState([0]);\r\n    const [ moveMinsLog, setMoveMinsLog ] = useState([0]);\r\n\r\n    useEffect(() => {\r\n    // ------------HEART POINTS API CALL------------\r\n        const hpBody = {\r\n            \"aggregateBy\": [{\r\n                \"dataTypeName\": \"com.google.heart_minutes\",\r\n            }],\r\n            \"startTimeMillis\": selectedDate.getTime(),\r\n            \"endTimeMillis\": selectedDate.getTime() + day - 1,\r\n            \"bucketByTime\": {\r\n                \"durationMillis\": day,\r\n                \"period\": {\r\n                    \"type\": \"day\",\r\n                    \"value\": 1,\r\n                    \"timeZoneId\": \"America/New_York\"\r\n                }\r\n            }\r\n        };\r\n        const hpLogBody = {\r\n            \"aggregateBy\": [{\r\n                \"dataTypeName\": \"com.google.heart_minutes\",\r\n            }],\r\n            \"startTimeMillis\": selectedDate.getTime(),\r\n            \"endTimeMillis\": selectedDate.getTime() + day - 1,\r\n            \"bucketByTime\": {\r\n                \"durationMillis\": hour,\r\n                \"period\": {\r\n                    \"type\": \"day\",\r\n                    \"value\": 1,\r\n                    \"timeZoneId\": \"America/New_York\"\r\n                }\r\n            }\r\n        };\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(hpBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            if (response.bucket[0].dataset[0].point.length !== 0) {\r\n                let obj = {\r\n                    actual: response.bucket[0].dataset[0].point[0].value[0].fpVal, \r\n                    goal: 36, \r\n                    color: '#06bf9a', \r\n                    title: 'Heart Points'\r\n                }\r\n                setHeartPoints(obj);\r\n            } else {\r\n                let obj = {\r\n                    actual: 0, \r\n                    goal: 36, \r\n                    color: '#06bf9a', \r\n                    title: 'Heart Points'\r\n                }\r\n                setHeartPoints(obj);\r\n            }\r\n        })\r\n        .catch(error => console.log(error));\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(hpLogBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            let hplist = [];\r\n            response.bucket.forEach(x => {\r\n                if (x.dataset[0].point.length !== 0) {\r\n                    hplist.push(x.dataset[0].point[0].value[0].fpVal);\r\n                } else {\r\n                    hplist.push(0);\r\n                }\r\n            });\r\n            setHeartPointsLog(hplist);\r\n        })\r\n        .catch(error => console.log(error));\r\n        \r\n    // ------------STEPS API CALL------------\r\n        const stepsBody = {\r\n            \"aggregateBy\": [{\r\n                \"dataTypeName\": \"com.google.step_count.delta\",\r\n                \"dataSourceId\": \"derived:com.google.step_count.delta:com.google.android.gms:estimated_steps\"\r\n            }],\r\n            \"startTimeMillis\": selectedDate.getTime(),\r\n            \"endTimeMillis\": selectedDate.getTime() + day,\r\n            \"bucketByTime\": {\r\n                \"durationMillis\": day,\r\n                \"period\": {\r\n                    \"type\": \"day\",\r\n                    \"value\": 1,\r\n                    \"timeZoneId\": \"America/New_York\"\r\n                }\r\n            }\r\n        };\r\n        const stepsLogBody = {\r\n            \"aggregateBy\": [{\r\n                \"dataTypeName\": \"com.google.step_count.delta\",\r\n                \"dataSourceId\": \"derived:com.google.step_count.delta:com.google.android.gms:estimated_steps\"\r\n            }],\r\n            \"startTimeMillis\": selectedDate.getTime(),\r\n            \"endTimeMillis\": selectedDate.getTime() + day - 1,\r\n            \"bucketByTime\": {\r\n                \"durationMillis\": hour,\r\n                \"period\": {\r\n                    \"type\": \"day\",\r\n                    \"value\": 1,\r\n                    \"timeZoneId\": \"America/New_York\"\r\n                }\r\n            }\r\n        };\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(stepsBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            if (response.bucket[0].dataset[0].point.length !== 0) {\r\n                let obj = {\r\n                    actual: response.bucket[0].dataset[0].point[0].value[0].intVal, \r\n                    goal: 15000, \r\n                    color: '#4285F4', \r\n                    title: 'Steps'\r\n                }\r\n                setSteps(obj);\r\n            } else {\r\n                let obj = {\r\n                    actual: 0, \r\n                    goal: 15000, \r\n                    color: '#4285F4', \r\n                    title: 'Steps'\r\n                }\r\n                setSteps(obj);\r\n            }\r\n        })\r\n        .catch(error => console.log(error));\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(stepsLogBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            let steplist = [];\r\n            response.bucket.forEach(x => {\r\n                if (x.dataset[0].point.length !== 0) {\r\n                    steplist.push(x.dataset[0].point[0].value[0].intVal);\r\n                } else {\r\n                    steplist.push(0);\r\n                }\r\n            });\r\n            setLogSteps(steplist);\r\n        })\r\n        .catch(error => console.log(error));\r\n\r\n\r\n    // ------------DIST API CALL------------\r\n        const distBody = {\r\n            \"aggregateBy\": [{\r\n                \"dataTypeName\": \"com.google.distance.delta\",\r\n            }],\r\n            \"startTimeMillis\": selectedDate.getTime(),\r\n            \"endTimeMillis\": selectedDate.getTime() + day - 1,\r\n            \"bucketByTime\": {\r\n                \"durationMillis\": hour,\r\n                \"period\": {\r\n                    \"type\": \"day\",\r\n                    \"value\": 1,\r\n                    \"timeZoneId\": \"America/New_York\"\r\n                }\r\n            }\r\n        };\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(distBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            let temp = [];\r\n            response.bucket.forEach(x => {\r\n                if (x.dataset[0].point.length !== 0) {                       \r\n                    temp.push(mToMi(x.dataset[0].point[0].value[0].fpVal).toFixed(2));\r\n                } else {\r\n                    temp.push(mToMi(0).toFixed(2));\r\n                }\r\n            });\r\n            setDistLog(temp);\r\n        })\r\n        .catch(error => console.log(error));\r\n\r\n    // ------------CALS API CALL------------\r\n        const calsBody = {\r\n            \"aggregateBy\": [{\r\n                \"dataTypeName\": \"com.google.calories.expended\",\r\n            }],\r\n            \"startTimeMillis\": selectedDate.getTime(),\r\n            \"endTimeMillis\": selectedDate.getTime() + day - 1,\r\n            \"bucketByTime\": {\r\n                \"durationMillis\": hour,\r\n                \"period\": {\r\n                    \"type\": \"day\",\r\n                    \"value\": 1,\r\n                    \"timeZoneId\": \"America/New_York\"\r\n                }\r\n            }\r\n        };\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(calsBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            let temp = [];\r\n            response.bucket.forEach(x => {\r\n                if (x.dataset[0].point.length !== 0) {\r\n                    temp.push(Math.round(x.dataset[0].point[0].value[0].fpVal));\r\n                } else {\r\n                    temp.push(0);\r\n                }\r\n            });\r\n            setCalsLog(temp);\r\n        })\r\n        .catch(error => console.log(error));\r\n\r\n    // ------------MOVE MINS API CALL------------\r\n        const mmBody = {\r\n            \"aggregateBy\": [{\r\n                \"dataTypeName\": \"com.google.active_minutes\",\r\n            }],\r\n            \"startTimeMillis\": selectedDate.getTime(),\r\n            \"endTimeMillis\": selectedDate.getTime() + day - 1,\r\n            \"bucketByTime\": {\r\n                \"durationMillis\": hour,\r\n                \"period\": {\r\n                    \"type\": \"day\",\r\n                    \"value\": 1,\r\n                    \"timeZoneId\": \"America/New_York\"\r\n                }\r\n            }\r\n        };\r\n        fetch(\r\n            requestURL,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;encoding=utf-8',\r\n                    'Authorization': `Bearer ${props.user.accessToken}`,\r\n                },\r\n                body: JSON.stringify(mmBody)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            let temp = [];\r\n            response.bucket.forEach(x => {\r\n                if (x.dataset[0].point.length !== 0) {\r\n                    temp.push(x.dataset[0].point[0].value[0].intVal);\r\n                } else {\r\n                    temp.push(0);\r\n                }\r\n            });\r\n            setMoveMinsLog(temp);\r\n            setLoaded(true);\r\n        })\r\n        .catch(error => console.log(error));\r\n\r\n    }, [selectedDate]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // ------------LOG ROW DATA POPULATION------\r\n    const [ rows, setRows ] = useState([{time: '', hp: 0, step: 0, dist: 0, cals: 0, mm: 0}]);\r\n    useEffect(() => {\r\n        let row = [];\r\n\r\n        for(let i = 0; i < logSteps.length; i++) {\r\n            const entry = {\r\n                time: new Date(selectedDate.getTime() + i * hour).toLocaleTimeString(),\r\n                hp: heartPointsLog[i],\r\n                step: logSteps[i],\r\n                dist: distLog[i],\r\n                cals: calsLog[i],\r\n                mm: moveMinsLog[i]\r\n            }\r\n            row.push(entry);\r\n        }\r\n        setRows(row);\r\n    }, [ selectedDate, heartPointsLog, logSteps, distLog, calsLog, moveMinsLog]); // eslint-disable-line react-hooks/exhaustive-deps\r\n    \r\n    \r\n\r\n    // ------------SESSIONS API CALL------------\r\n    // it turns out sessions only track manually entered SESSIONS which (for some reason) is seperate from activities tracked in the Google Fit app.\r\n    // Future Implementation: add ability to insert a session in the website\r\n    //                         - like in home add chips to switch between the hourly log and session data\r\n\r\n    // let sessionsRequestUrl = new URL('https://www.googleapis.com');\r\n    // sessionsRequestUrl.protocol = 'https';\r\n    // sessionsRequestUrl.hostname = 'www.googleapis.com';\r\n    // sessionsRequestUrl.pathname = '/fitness/v1/users/me/sessions';\r\n    // sessionsRequestUrl.searchParams.append('startTime', `${selectedDate.toISOString()}`);\r\n    // sessionsRequestUrl.searchParams.append('endTime', `${new Date(selectedDate.getTime() + day - 1).toISOString()}`);\r\n    // console.log(sessionsRequestUrl);\r\n    // useEffect(() => {\r\n    //     fetch(\r\n    //         sessionsRequestUrl,\r\n    //         {\r\n    //             method: \"GET\",\r\n    //             headers: {\r\n    //                 'Accept': 'application/json;encoding=utf-8',\r\n    //                 'Authorization': `Bearer ${props.user.accessToken}`,\r\n    //             }\r\n    //         }\r\n    //     )\r\n    //     .then(res => res.json())\r\n    //     .then(response => {\r\n    //         console.log(response);\r\n    //     })\r\n    //     .catch(error => console.log(error));\r\n    // }, [selectedDate]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div className=\"page\">\r\n            <div className=\"pageTitle\">Your Fitness Journal</div> \r\n            <div className=\"topNav\">\r\n                <div className=\"monthYear\">\r\n                    {getMonthTitle()}\r\n                </div>\r\n                <div className=\"topDates\">\r\n                    <button class=\"mdc-icon-button material-icons\" onClick={() => handleNav(-1)}>keyboard_arrow_left</button>\r\n                    {renderDays()}\r\n                    <button class=\"mdc-icon-button material-icons\" onClick={() => handleNav(1)}>keyboard_arrow_right</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"bottomSection\">\r\n                <div className=\"log\">\r\n                    <span className=\"currDate\">{getMonth(selectedDate.getMonth()+1) + \" \" + selectedDate.getDate() + \",\" + selectedDate.getFullYear()}</span>\r\n                    <div class=\"mdc-data-table mdc-data-table--sticky-header\">\r\n                        <div class=\"mdc-data-table__table-container\">\r\n                            <table class=\"mdc-data-table__table\">\r\n                                <thead>                                    \r\n                                    <tr class=\"mdc-data-table__header-row\">\r\n                                        <th class=\"mdc-data-table__header-cell header-text\" role=\"columnheader\" scope=\"col\">Time</th>\r\n                                        <th class=\"mdc-data-table__header-cell mdc-data-table__header-cell--numeric header-text\" role=\"columnheader\" scope=\"col\">Heart Points</th>\r\n                                        <th class=\"mdc-data-table__header-cell mdc-data-table__header-cell--numeric header-text\" role=\"columnheader\" scope=\"col\">Steps</th>\r\n                                        <th class=\"mdc-data-table__header-cell mdc-data-table__header-cell--numeric header-text\" role=\"columnheader\" scope=\"col\">Distance (mi)</th>\r\n                                        <th class=\"mdc-data-table__header-cell mdc-data-table__header-cell--numeric header-text\" role=\"columnheader\" scope=\"col\">Calories (kCal)</th>\r\n                                        <th class=\"mdc-data-table__header-cell mdc-data-table__header-cell--numeric header-text\" role=\"columnheader\" scope=\"col\">Move Minutes</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody class=\"mdc-data-table__content\">\r\n                                    {loaded ? rows.map(x => \r\n                                        <tr class=\"mdc-data-table__row\">\r\n                                            <th class=\"mdc-data-table__cell\" scope=\"row\">{x.time}</th>\r\n                                            <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">{x.hp}</td>\r\n                                            <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">{x.step}</td>\r\n                                            <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">{x.dist}</td>\r\n                                            <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">{x.cals}</td>\r\n                                            <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">{x.mm}</td>\r\n                                        </tr>\r\n                                    )\r\n                                    : rows.map(x => \r\n                                        <tr class=\"mdc-data-table__row\">\r\n                                            <th class=\"mdc-data-table__cell\" scope=\"row\">{x.time}</th>\r\n                                            <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">—</td>\r\n                                            <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">—</td>\r\n                                            <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">—</td>\r\n                                            <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">—</td>\r\n                                            <td class=\"mdc-data-table__cell mdc-data-table__cell--numeric\">—</td>\r\n                                        </tr>\r\n                                    )}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"journalGraphs\">\r\n                    <div className=\"stepsData\">\r\n                        <span class=\"material-icons stepsIcon\">directions_walk</span>\r\n                        <div className=\"stepsText\">\r\n                            {loaded ? steps.actual : '—'} Steps\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"heartPointsData\">\r\n                        <span class=\"material-icons heartPointsIcon\">favorite_border</span>\r\n                        <div className=\"heartPointsText\">\r\n                            {loaded ? heartPoints.actual : '—'} Heart Points\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"goalData\">\r\n                        <div className=\"logDataGraphTitle\">% Daily Goal</div>\r\n                        <div className=\"goalDataGraphs\">\r\n                            {loaded ? renderPieChart(steps.actual, steps.goal, steps.color, steps.title) : renderPieChart(0,1,'','Loading..')}\r\n                            {loaded ? renderPieChart(heartPoints.actual, heartPoints.goal, heartPoints.color, heartPoints.title) : renderPieChart(0,1,'','Loading..')}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","/* Packages */\r\nimport React from 'react';\r\n/* Styles */\r\nimport '../styles/About.scss';\r\n\r\nexport default function About() {\r\n\r\n    return (\r\n        <div className=\"about\">\r\n            <div className=\"header-about\">About</div>\r\n            <p className=\"content-about\">\r\n                Google Fit Web is a web application in which users are able to see their fitness data acquired by the Google Fit mobile and wearable app. \r\n                The experience of using this web application is meant to resemble the user experience of using the mobile app but on a larger screen.\r\n                With a larger screen, more data is able to be displayed and presented.\r\n            </p>\r\n            <h2>Motivation</h2>\r\n            <p className=\"content-about\">\r\n                Google acquired Fitbit and has put a lot more effort in their wearable software such as Wear OS. These acquisitions and efforts can result in an influx of new users who will want options when it comes to seeing their fitness data.\r\n                This website aims to be a web alternative to the Google Fit mobile and wearable app.\r\n            </p>\r\n            <h2>Privacy</h2>\r\n            <p className=\"content-about\">\r\n                Google Fit Web will not store or share any user information. The site only reads and writes information from users' Google accounts after sign in. \r\n                The data displayed is simply read using the Google Fit REST API and the Google People API. \r\n                No cookies, local storage, or database is used to store personal information nor information retrieved from the users' Google accounts.\r\n                For more information on your privacy, please visit the <a href='https://github.com/jtlamb/google-fit-web/blob/master/PRIVACY_POLICY.md#google-fit-web-privacy-policy' target='_blank'>Privacy Policy</a>.\r\n            </p>\r\n            <h2>Disclaimer</h2>\r\n            <p className=\"content-about\">\r\n                This project is not a product from Google themselves nor do I have any affiliation with Google. This is an independent student project for CS 4365 at the Georgia Institute of Technology. \r\n            </p>\r\n        </div>\r\n    )\r\n}","export const blankUser = {\n    authenticated: false,\n    name: \"\",\n    fname: \"\",\n    lname: \"\",\n    pfPic: \"\",\n    email: \"\",\n    accessToken: \"\"\n};\n\nexport const createUser = (authenticated, name, fname, lname, pfPic, email, accessToken) => {\n    const popUser = {\n        authenticated: authenticated,\n        name: name,\n        fname: fname,\n        lname: lname,\n        pfPic: pfPic,\n        email: email,\n        accessToken: accessToken\n    }\n    return popUser;\n}","/* Packages */\r\nimport React, { useContext, useState } from 'react';\r\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\r\n/* Contexts */\r\nimport { userContext } from './App';\r\n/* Utils */\r\nimport keys from '../secrets/oauth2.keys.json';\r\nimport { createUser, blankUser } from '../util/UserProfile';\r\n\r\n// Credit : https://github.com/ZoeLiao/React-Google-SignIn-SignOut-Demo/blob/master/src/GoogleBtn.js\r\n\r\nconst CLIENT_ID = keys.web.client_id;\r\nconst SCOPES = \"https://www.googleapis.com/auth/fitness.activity.read https://www.googleapis.com/auth/fitness.body.read https://www.googleapis.com/auth/fitness.body.write https://www.googleapis.com/auth/user.birthday.read https://www.googleapis.com/auth/user.gender.read https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/fitness.location.read https://www.googleapis.com/auth/fitness.location.write\";\r\n\r\n/** Google Sign In and Sign Out Button */\r\nexport default function SignInOut() {\r\n    // chooses whether to render sign in or sign out button\r\n    const [ isLoggedIn, setIsLoggedIn ] = useState(false);\r\n\r\n    // contexts to propagate to App\r\n    const { setUser } = useContext(userContext);\r\n\r\n    // handle login\r\n    const login = (response) => {\r\n        if (response.accessToken){\r\n            setIsLoggedIn(true);\r\n            setUser(\r\n                createUser(\r\n                    true,\r\n                    response.getBasicProfile().getName(),\r\n                    response.getBasicProfile().getGivenName(),\r\n                    response.getBasicProfile().getFamilyName(),\r\n                    response.getBasicProfile().getImageUrl().slice(0, response.getBasicProfile().getImageUrl().lastIndexOf(\"=\", response.getBasicProfile().getImageUrl().length-1)) + \"=s1000-c\",\r\n                    response.getBasicProfile().getEmail(),\r\n                    response.accessToken\r\n                )\r\n            )\r\n            console.log(response.getGrantedScopes())\r\n        }\r\n    }\r\n\r\n    // handle logout\r\n    const logout = () => {\r\n        setIsLoggedIn(false);\r\n        setUser(blankUser);\r\n    }\r\n\r\n    const handleLoginFailure = () => {\r\n        alert('Failed to login');\r\n    }\r\n\r\n    const handleLogoutFailure = () => {\r\n        alert('Failed to logout');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { isLoggedIn ?\r\n                <GoogleLogout\r\n                    clientId = {CLIENT_ID}\r\n                    buttonText = 'Logout'\r\n                    onLogoutSuccess={logout}\r\n                    onFailure={handleLogoutFailure}\r\n                />\r\n                : \r\n                <GoogleLogin\r\n                    clientId={CLIENT_ID}\r\n                    buttonText='Login'\r\n                    onSuccess={login}\r\n                    onFailure={handleLoginFailure}\r\n                    cookiePolicy={'single_host_origin'}\r\n                    responseType='code,token'\r\n                    scope={SCOPES}\r\n                />\r\n            }\r\n        </div>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/GoogleFit_Logo_Horizontal.6b7881ab.png\";","/* Packages */\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n/* Child Components */\r\nimport SignInOut from './SignInOut';\r\n/* Styles */\r\nimport '../styles/SideNav.scss';\r\n/* Utils */\r\nimport FitLogo from '../imgs/GoogleFit_Logo_Horizontal.png'\r\n\r\n/** Sidebar Navigation\r\n *  conatins all of the navigation for the site\r\n * @param props.authenticated chooses what to render based on whether or not the user is authenticated\r\n */\r\nexport default function SideNav(props) {\r\n\r\n    // selected will track the current index of the selected item\r\n    const [ selected, setSelected ] = useState(0);\r\n\r\n    const handleClick = (i) => {\r\n        setSelected(i);\r\n    }\r\n\r\n    return (\r\n        <div className=\"SideNav\">\r\n            <aside className=\"mdc-drawer\">\r\n                <div className=\"mdc-drawer__content\">\r\n                    <nav className=\"mdc-list\">\r\n                        <div className=\"mdc-drawer__header\">\r\n                            <Link to=\"/\" className=\"nav header\" onClick={() => handleClick(0)}>\r\n                                <img src={FitLogo} alt=\"Google Fit Logo\" className=\"logo\"/>\r\n                            </Link>\r\n                        </div>\r\n                        {props.authenticated \r\n                        ? \r\n                            <div>\r\n                                <hr class=\"mdc-list-divider\" />\r\n                                <Link to=\"/\" className={selected === 0 ? \"mdc-list-item nav mdc-list-item--activated\" : \"mdc-list-item nav\"} onClick={() => handleClick(0)}> \r\n                                    <i className=\"material-icons mdc-list-item__graphic\" aria-hidden=\"true\">home</i>\r\n                                    <span className=\"mdc-list-item__text\">Home</span>\r\n                                </Link>\r\n                                <Link to={props.authenticated ? \"/profile\" : \"/\"} className={selected === 1 ? \"mdc-list-item nav mdc-list-item--activated\" : \"mdc-list-item nav\"} onClick={() => handleClick(1)}>\r\n                                    <i className=\"material-icons mdc-list-item__graphic\" aria-hidden=\"true\">account_circle</i>\r\n                                    <span className=\"mdc-list-item__text\">Profile</span>\r\n                                </Link>\r\n                                <Link to={props.authenticated ? \"/journal\" : \"/\"} className={selected === 2 ? \"mdc-list-item nav mdc-list-item--activated\" : \"mdc-list-item nav\"} onClick={() => handleClick(2)}>\r\n                                    <i className=\"material-icons mdc-list-item__graphic\" aria-hidden=\"true\">assignment</i>\r\n                                    <span className=\"mdc-list-item__text\">Journal</span>\r\n                                </Link>\r\n                            </div>\r\n                        :\r\n                            <></>\r\n                        }\r\n                        <hr class=\"mdc-list-divider\" />\r\n                        <Link to=\"/about\" className={selected === 3 ? \"mdc-list-item nav mdc-list-item--activated\" : \"mdc-list-item nav\"} onClick={() => handleClick(3)}>\r\n                            <i className=\"material-icons mdc-list-item__graphic\" aria-hidden=\"true\">info</i>\r\n                            <span className=\"mdc-list-item__text\">About</span>\r\n                        </Link>\r\n                    </nav>\r\n                </div>\r\n                <div className=\"login\">\r\n                    <SignInOut />\r\n                </div>\r\n            </aside>            \r\n        </div>\r\n    )\r\n}","/* Packages */\nimport React, { createContext, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n/* Styles */\nimport '../styles/App.scss';\n/* Child Components */\nimport LandingPage from './LandingPage';\nimport Home from './Home';\nimport Profile from './Profile';\nimport Journal from './Journal';\nimport About from './About';\nimport SideNav from './SideNav';\n/* Util */\nimport { blankUser } from '../util/UserProfile';\n\n// Context to track basic user info\nexport const userContext = createContext({\n  user: blankUser,\n  setUser: (user) => {}\n});\n\n/** App */\nexport default function App() {\n  const [ user, setUser] = useState(blankUser);\n\n  return (\n    <div className=\"App\">\n      <Router basename='/google-fit-web'>\n        <userContext.Provider value={{user, setUser}}>\n          <div className=\"sideNav\">\n            <SideNav authenticated={user.authenticated}/>\n          </div>\n        </userContext.Provider>\n        <Switch>\n          <div className=\"content\">\n            <Route exact path='/'>\n              {user.authenticated ? <Home user={user}/> : <LandingPage />}\n            </Route>\n            <Route exact path='/profile'>\n              {user.authenticated ? <Profile user={user}/> : <LandingPage />}\n            </Route>\n            <Route exact path='/journal'>\n              {user.authenticated ? <Journal user={user}/> : <LandingPage />}\n            </Route>\n            <Route exact path='/about'>\n              <About />\n            </Route>\n          </div>\n        </Switch>\n      </Router>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}